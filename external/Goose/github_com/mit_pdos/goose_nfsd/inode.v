(* autogenerated from github.com/mit-pdos/goose-nfsd/inode *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.mit_pdos.goose_nfsd.buf.
From Goose Require github_com.mit_pdos.goose_nfsd.common.
From Goose Require github_com.mit_pdos.goose_nfsd.util.
From Goose Require github_com.tchajed.marshal.

Definition NENTRIES : expr := #8.

Module Inode.
  Definition S := struct.decl [
    "Inum" :: uint64T;
    "Gen" :: uint64T;
    "Parent" :: uint64T;
    "Contents" :: slice.T uint64T;
    "Names" :: slice.T byteT
  ].
End Inode.

Definition Inode__InitInode: val :=
  rec: "Inode__InitInode" "ip" "inum" "parent" :=
    util.DPrintf #1 (#(str"initInode: inode # %d
    ")) #();;
    struct.storeF Inode.S "Inum" "ip" "inum";;
    struct.storeF Inode.S "Parent" "ip" "parent";;
    struct.storeF Inode.S "Gen" "ip" (struct.loadF Inode.S "Gen" "ip" + #1);;
    struct.storeF Inode.S "Contents" "ip" (NewSlice uint64T NENTRIES);;
    struct.storeF Inode.S "Names" "ip" (NewSlice byteT NENTRIES).

Definition MkRootInode: val :=
  rec: "MkRootInode" <> :=
    let: "ip" := struct.alloc Inode.S (zero_val (struct.t Inode.S)) in
    Inode__InitInode "ip" common.ROOTINUM #0;;
    "ip".

Definition Inode__Encode: val :=
  rec: "Inode__Encode" "ip" :=
    let: "enc" := marshal.NewEnc common.INODESZ in
    marshal.Enc__PutInt "enc" (struct.loadF Inode.S "Gen" "ip");;
    marshal.Enc__PutInt "enc" (struct.loadF Inode.S "Parent" "ip");;
    marshal.Enc__PutInts "enc" (struct.loadF Inode.S "Contents" "ip");;
    marshal.Enc__PutBytes "enc" (struct.loadF Inode.S "Names" "ip");;
    marshal.Enc__Finish "enc".

Definition Decode: val :=
  rec: "Decode" "buf" "inum" :=
    let: "ip" := struct.alloc Inode.S (zero_val (struct.t Inode.S)) in
    let: "dec" := marshal.NewDec (struct.loadF buf.Buf.S "Data" "buf") in
    struct.storeF Inode.S "Inum" "ip" "inum";;
    struct.storeF Inode.S "Gen" "ip" (marshal.Dec__GetInt "dec");;
    struct.storeF Inode.S "Parent" "ip" (marshal.Dec__GetInt "dec");;
    struct.storeF Inode.S "Contents" "ip" (marshal.Dec__GetInts "dec" NENTRIES);;
    struct.storeF Inode.S "Names" "ip" (marshal.Dec__GetBytes "dec" NENTRIES);;
    "ip".
